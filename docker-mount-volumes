#!/bin/python
###########################################################
# Mateusz Zoltak <mateusz.zoltak@oeaw.ac.at>
#
# Script generating pretty-named symlinks to docker
# containers volumes
###########################################################

import argparse
import docker
import os
import re

dockerURL = 'unix://var/run/docker.sock'
rootBase  = '/srv/docker/'	# symlinks will be create at {rootBase}/{containerName}/{containerPath}
				# where {containerPath} will have '/' turned into '-'

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--verbose', action = 'store_true', required = False)
parser.add_argument('-c', '--container', action = 'append', nargs='*', required = False)
args = parser.parse_args()
if args.container is None :
  args.container = [[]]
args.container = reduce(lambda x, y: x + y, args.container)

###########################################################

rootBase = re.sub('/$', '', rootBase)

if not os.path.exists(rootBase):
  os.makedirs(rootBase)

host = docker.Client(base_url = dockerURL)
for container in host.containers():
  name = container['Id']
  if len(container['Names']) > 0: 
    name = re.sub('^/', '', container['Names'][0])

  name = name.replace('/', '-')
  if args.container.count(name) > 0 or len(args.container) == 0:
    if args.verbose == True :
      print 'Creating symlinks for container ' + name 

    if os.path.exists(rootBase + '/' + name) :
      for fileName in os.listdir(rootBase + '/' + name) :
        if os.path.islink(rootBase + '/' + name + '/' + fileName) :
          os.remove(rootBase + '/' + name + '/' + fileName)

    for guestPath, hostPath in host.inspect_container(container['Id'])['Volumes'].iteritems():
      if args.verbose == True :
        print '\t' + guestPath + ':' + hostPath

      if not os.path.exists(rootBase + '/' + name):
        os.makedirs(rootBase + '/' + name)

      path = rootBase + '/' + name + '/' + re.sub('^/', '', guestPath).replace('/', '-')

      if os.path.islink(path):
        os.unlink(path)

      if not os.path.exists(path):
        os.symlink(hostPath, path)
      else: 
        if args.verbose == False :
          print '\t' + guestPath + ':' + hostPath
        print '\tcan not create symlink - file or directory with the same name already exists!'

