#!/bin/python

import argparse
import datetime
import fcntl
import os
import psycopg2
import re
import socket
import subprocess
import time
import traceback


parser = argparse.ArgumentParser()
parser.add_argument('--dbConf', default='dbname=docker host=helios port=5433 user=docker')
parser.add_argument('--file')
parser.add_argument('--timeout', default=1, type=int)
args = parser.parse_args()

con = psycopg2.connect(args.dbConf)
cur = con.cursor()

file = None
if args.file is not None:
    file = open(args.file, 'w')

def getContainerId(cur, hash, localCache, contCache, users):
    if hash not in localCache:
        print('Refreshing docker container id to container name mappings')
        data = subprocess.check_output(['/usr/bin/docker', 'ps'])
        data = data.split("\n")[1:]
        data = [x.split(' ') for x in data]
        for i in data:
            localCache[i[0]] = i[-1]
    name = localCache[hash]
    user = name.split('-')[0]
    if user not in users:
        if user not in os.listdir('/home'):
            name = 'temp'
        else:
            users.append(user)
    if name not in contCache:
        cur.execute("SELECT container_id FROM containers WHERE name = %s AND host = %s", (name, socket.gethostname()))
        id = cur.fetchone()
        if id is None:
            print('Registering container %s in the database' % name)
            cur.execute(
                "INSERT INTO containers (container_id, name, host) VALUES (nextval('container_id_seq'), %s, %s) RETURNING container_id",
                (name, socket.gethostname())
            )
            id = cur.fetchone()
        contCache[name] = id[0]
    return contCache[name]

def writeIfDiff(cur, stat, statCache, file):
    id = str(stat[0])
    tmp = '|'.join([str(x) for x in stat])
    if id not in statCache or tmp != statCache[id]:
        if file is not None:
            #file.write('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' % (stat[0:1] + (str(datetime.datetime.now()), ) + stat[1:]))
            file.write('%s\t%s\t%s\t%s\n' % (stat[0:1] + (str(datetime.datetime.now()), ) + stat[1:]))
        else:
            #cur.execute("INSERT INTO stats VALUES (%s, now(), %s, %s, %s, %s, %s, %s)", stat)
            cur.execute("INSERT INTO stats VALUES (%s, now(), %s, %s)", stat)
    statCache[id] = tmp

with open('/proc/cpuinfo', 'r') as f:
  maxCpu = 100 * len(re.findall('processor[^:]*: [0-9]+', f.read()))
localCache = {}
contCache = {}
statCache = {}
users = os.listdir('/home')
multi = {'B': 1 / (1024 * 1024), 'k': 1 / 1024, 'M': 1, 'G': 1024, 'T': 1024*1024, 'P': 1024*1024*1024}
proc = subprocess.Popen(['/usr/bin/docker', 'stats'], stdout=subprocess.PIPE)
fcntl.fcntl(proc.stdout, fcntl.F_SETFL, fcntl.fcntl(proc.stdout, fcntl.F_GETFL) | os.O_NONBLOCK)
prev = ''
while proc.returncode is None:
    time.sleep(args.timeout)
    try:
        data = proc.stdout.read()
    except:
        continue
    try:
        lines = (prev + data).split("\n")
        prev = lines.pop()
        lines = [re.split('[ /]+', x) for x in lines if re.search('^[A-Za-z0-9]', x)]
        for i in lines:
            # 0 container        1 CPU    2 MEM                                    7 net in       9 net out      11 io read     13 io write    15 pids
            # 'tokeneditor-php', '0.02%', '8.977', 'MiB', '31.26', 'GiB', '0.03%', '761.5', 'MB', '870.9', 'MB', '292.4', 'MB', '106.5', 'kB', '12'
            if len(i) == 11:
                # new format
                # 0 id            1 container  2 CPU    3 MEM                            6 net in  7 net out  8 io read  9 io write  10 pids
                # '636a88da3a7f', 'traefik',   '0.49%', '25.75MiB', '62.76GiB', '0.04%', '923MB',  '979MB',   '59.8MB',  '0B',       '43'
                i = [
                    i[0], i[2], 
                    re.sub('[^0-9.]', '', i[3]), re.sub('^[0-9.]*', '', i[3]), 
                    re.sub('[^0-9.]', '', i[4]), re.sub('^[0-9.]*', '', i[4]), 
                    i[5],
                    re.sub('[^0-9.]', '', i[6]), re.sub('^[0-9.]*', '', i[6]), 
                    re.sub('[^0-9.]', '', i[7]), re.sub('^[0-9.]*', '', i[7]), 
                    re.sub('[^0-9.]', '', i[8]), re.sub('^[0-9.]*', '', i[8]), 
                    re.sub('[^0-9.]', '', i[9]), re.sub('^[0-9.]*', '', i[9]), 
                    i[10]
                ]
            if i[1] == 'CPU' or len(i) != 16:
                if not re.search('^[a-z0-9]+ [ -]+$', ' '.join(i)):
                    print('Skipping invalid line')
                    print('  ' + ' '.join(i))
                continue
            id = getContainerId(cur, i[0], localCache, contCache, users)
            try: cpu = min(maxCpu, float(i[1][0:-1]))
            except: cpu = 0
            try: mem = float(i[2]) * multi[i[3][0:1]]
            except: mem = 0
            #try: netIn = float(i[7]) * multi[i[8][0:1]]
            #except: netIn = 0
            #try: netOut = float(i[9]) * multi[i[10][0:1]]
            #except: netOut = 0
            #try: ioRead = float(i[11]) * multi[i[12][0:1]]
            #except: ioRead = 0
            #try: ioWrite = float(i[13]) * multi[i[14][0:1]]
            #except: ioWrite = 0
            #stat = (id, cpu, mem, netIn, netOut, ioRead, ioWrite)
            stat = (id, cpu, mem)
            writeIfDiff(cur, stat, statCache, file)
            con.commit()
    except Exception as e:
        print(traceback.format_exc())
        print(e)
if file is not None:
    close(file)

