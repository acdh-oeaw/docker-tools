#!/bin/python

import argparse
import collections
import docker
import json
import os
import re
import stat
import subprocess
import time

import docker_manage

parser = argparse.ArgumentParser(description='Script for maintaining docker images and containers')
parser.add_argument('-p', '--project', action='append', nargs='*', required=False,
                    help='Project whose environments should be processed')
parser.add_argument('-e', '--environment', action='append', nargs='*', required=False,
                    help='Names of environments to process')
parser.add_argument('-a', '--action', action='store', nargs=1, required=False,
                    choices=['check', 'build', 'run', 'stop', 'clean', 'enter-as-root', 'enter', 'logs'],
                    help='Action to perform')
parser.add_argument('-c', '--command', action='append', nargs=argparse.REMAINDER, required=False,
                    help='Command to run inside guest (only if action=enter or action=enter-as-root)')
parser.add_argument('-v', '--verbose', action='store_true', required=False, help='Enable verbose output')
args = parser.parse_args()


def sanitizeArg(arg):
    if arg is None:
        arg = [[]]
    arg = reduce(lambda x, y: x + y, arg)
    arg = [unicode(x, 'utf8') for x in arg]
    return arg


args.project = sanitizeArg(args.project)
args.environment = sanitizeArg(args.environment)
args.command = sanitizeArg(args.command)

print('Loading config...')
configuration = docker_manage.Configuration()

print('Checking conflicts between environments...')
configuration.check()

if not args.action is None and args.action.count('stop') > 0:
    print('Stopping containers...')
    configuration.stop(args.project, args.environment, args.verbose)

if args.action is None or args.action.count('check') == 0 :
  print('Removing obsolete environments...')
  configuration.clean(args.verbose)

if args.action is None or args.action.count('build') > 0:
    print('Building images...')
    configuration.buildImages(args.project, args.environment, args.verbose)

if args.action is None or args.action.count('run') > 0:
    print('Running containers...')
    n = configuration.runContainers(args.project, args.environment, args.verbose)

    if n > 0:
        print('Running hooks...')
        # give container(s) time to start before executing hooks
        time.sleep(5)
        configuration.runHooks(args.project, args.environment, args.verbose)

if not args.action is None:
    if len(args.action) != 1:
        print('  Please choose exactly one environment')
    else:
        if args.action.count('enter-as-root') > 0 or args.action.count('enter') > 0:
            print('Running console...')
            configuration.runCommand(args.project, args.environment[0], args.action[0], args.command)
        elif args.action.count('logs') > 0:
            print('Printing logs...')
            configuration.showLogs(args.project, args.environment[0])
